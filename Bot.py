import threading
import time
import schedule

# –ü–æ–¥–∫–ª—é—á–∞–µ–º –º–æ–¥—É–ª—å –¥–ª—è –¢–µ–ª–µ–≥—Ä–∞–º–∞
import telebot
from telebot import types
from telegram import ParseMode

from buttons import generate_buttons, generate_position_buttons
from handlers import get_user, create_user, add_position, create_meeting, change_meeting_date, approved_meeting, \
    declined_meeting, meeting_reminder, set_rating, get_history, get_rating_history, vote_reminder

with open("token", "r") as f:
    token = f.read()
    print(token)
#
# # –£–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–∫–µ–Ω
bot = telebot.TeleBot(token)


# –ú–µ—Ç–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–ª—É—á–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏—Ö
@bot.message_handler(content_types=['text'])
def get_text_messages(message):
    if message.text == "/help":
        bot.send_message(message.from_user.id, "–ù–∞–ø–∏—à–∏ /start –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º \n"
                                               "/history - –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ –ø–æ—Å–ª–µ–¥–Ω–∏–º 10 –≤—Å—Ç—Ä–µ—á–∞–º \n"
                                               "/rating - –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞")
    elif message.text.find("/position") != -1:
        response_status, response = add_position(message.from_user.id, message.text.replace('/position', ''))
        bot.send_message(message.from_user.id, response)
        if response_status:
            meeting(message.from_user.id)
    elif message.text == "/start":
        user = get_user(message.from_user.id)
        if user:
            if user[3]:
                bot.send_message(message.from_user.id, "–î–ª—è –ø–æ–∏—Å–∫–∞ –≤—Å—Ç—Ä–µ—á–∏ –Ω–∞–ø–∏—à–∏ /meeting.")
            else:
                bot.send_message(message.from_user.id, "–ó–∞—Ñ–∏–∫—Å–∏—Ä—É–π —Å–≤–æ—é –¥–æ–ª–∂–Ω–æ—Å—Ç—å. –ù–∞–ø–∏—à–∏ /position –Ω–∞–∑–≤–∞–Ω–∏–µ_–¥–æ–ª–∂–Ω–æ—Å—Ç–∏",
                                 reply_markup=generate_position_buttons())
        else:
            response = create_user(message.from_user)
            bot.send_message(message.from_user.id, response, reply_markup=generate_position_buttons())
    elif message.text == "/meeting":
        meeting(message.from_user.id)
    elif message.text == "/vote":
        msg = "–ö–∞–∫ –ø—Ä–æ—à–ª–∞ –≤–∞—à–∞ –≤—Å—Ç—Ä–µ—á–∞? –í–∞—à–µ –º–Ω–µ–Ω–∏–µ –≤–∞–∂–Ω–æ –¥–ª—è –Ω–∞—Å. –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ä—Ç–∏–Ω–∫—É:"

        keyboard = types.InlineKeyboardMarkup()  # –Ω–∞—à–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
        keyboard.add(types.InlineKeyboardButton(text='ü§©', callback_data='2'))
        keyboard.add(types.InlineKeyboardButton(text='üòé', callback_data='1'))
        keyboard.add(types.InlineKeyboardButton(text='ü§®', callback_data='0'))
        keyboard.add(types.InlineKeyboardButton(text='üò¨', callback_data='-1'))
        keyboard.add(types.InlineKeyboardButton(text='ü§Æ', callback_data='-2'))

        bot.send_message(message.from_user.id, msg, reply_markup=keyboard)
    elif message.text == "/history":
         table = get_history(message.from_user.id)
         bot.send_message(message.from_user.id, f'<pre>{table}</pre>', parse_mode=ParseMode.HTML)
    elif message.text == "/rating":
        response = get_rating_history(message.from_user.id)
        if response > 0:
            emoji = 'üòé'
        else:
            emoji = 'üëπ'
        bot.send_message(message.from_user.id, f'–¢–≤–æ–π —Ä–µ–π—Ç–∏–Ω–≥ {response} {emoji}')
    else:
        bot.send_message(message.from_user.id, "–Ø —Ç–µ–±—è –Ω–µ –ø–æ–Ω–∏–º–∞—é. –ù–∞–ø–∏—à–∏ /start.")


def remind(meeting_participant, user_id, date):
    msg = "–ù–∞–ø–æ–º–∏–Ω–∞–µ–º: —É –≤–∞—Å –≤—Å—Ç—Ä–µ—á–∞ —Å " + meeting_participant + "–≤ " + str(date.strftime('%Y-%m-%d %H:%M'))
    bot.send_message(user_id, msg)


def job():
    print("–ó–∞–ø—É—Å–∫–∞—é –ø–æ–∏—Å–∫ –≤—Å—Ç—Ä–µ—á –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")
    meeting_reminder(remind)


schedule.every(60).seconds.do(job)


def remind_vote(user_id):
    bot.send_message(user_id, "–û—Ü–µ–Ω–∏ —Å–≤–æ—é –ø—Ä–æ—à–µ–¥—à—É—é –≤—Å—Ç—Ä–µ—á—É, –≤–≤–µ–¥–∏ –∫–æ–º–∞–Ω–¥—É /vote")


def job_vote():
    print("–ó–∞–ø—É—Å–∫–∞—é –ø–æ–∏—Å–∫ –≤—Å—Ç—Ä–µ—á –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –æ—Ü–µ–Ω–∏—Ç—å –≤—Å—Ç—Ä–µ—á—É")
    vote_reminder(remind_vote)


schedule.every().day.at("13:30").do(job_vote)
#schedule.every(60).seconds.do(job_vote)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
@bot.callback_query_handler(func=lambda call: True)
def callback_worker(call):
    if call.data == "yes":
        response = approved_meeting(call.message.chat.id, True, bot)
        bot.send_message(call.message.chat.id, response)
    elif call.data == "no":
        response_status, response, users = declined_meeting(call.message.chat.id)
        if response_status:
            bot.send_message(users[0], response)
            bot.send_message(users[1], response)
        else:
            bot.send_message(call.message.chat.id, response)
    elif call.data == "new_date":
        status_response, response, users = change_meeting_date(call.message.chat.id)
        if status_response:
            bot.send_message(users[0], response)
            bot.send_message(users[1], response)
        else:
            bot.send_message(call.message.chat.id, response)
    elif call.data in ["-2", "-1", "0", "1", "2"]:
        msg = set_rating(call.message.chat.id, call.data)
        bot.send_message(call.message.chat.id, msg)
    elif call.data in ["HR", "Manager", "Developer"]:
        response_status, response = add_position(call.message.chat.id, call.data)
        bot.send_message(call.message.chat.id, response)
        if response_status:
            meeting(call.message.chat.id)


def worker():
    # –Ω—É–∂–Ω–æ –∏–º–µ—Ç—å —Å–≤–æ–π —Ü–∏–∫–ª –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ —Å –ø–µ—Ä–∏–æ–¥–æ–º –≤ 1 —Å–µ–∫—É–Ω–¥—É:
    while True:
        schedule.run_pending()
        time.sleep(1)


def meeting(id):
    response_status, response, second_user_id = create_meeting(id)
    keyboard = generate_buttons(id)
    if response_status:
        bot.send_message(second_user_id, response[1], reply_markup=keyboard)
    bot.send_message(id, response[0], reply_markup=keyboard)

t = threading.Thread(target=worker, args=())

t.start()
# –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–π –æ–ø—Ä–æ—Å –±–æ—Ç–∞ –≤ –¢–µ–ª–µ–≥—Ä–∞–º–µ
b = threading.Thread(target=bot.polling(none_stop=True, interval=0), args=())
b.start()





